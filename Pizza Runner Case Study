USE DATABASE DANNYS_DINER;

CREATE SCHEMA pizza_runner;

DROP TABLE IF EXISTS runners;
CREATE TABLE runners (
  "runner_id" INTEGER,
  "registration_date" DATE
);
INSERT INTO runners
  ("runner_id", "registration_date")
VALUES
  (1, '2021-01-01'),
  (2, '2021-01-03'),
  (3, '2021-01-08'),
  (4, '2021-01-15');


DROP TABLE IF EXISTS customer_orders;
CREATE TABLE customer_orders (
  ORDER_ID INTEGER,
  CUSTOMER_ID INTEGER,
  PIZZA_ID INTEGER,
  EXCLUSIONS VARCHAR(4),
  EXTRAS VARCHAR(4),
  ORDER_TIME TIMESTAMP
);

INSERT INTO customer_orders
  (ORDER_ID, CUSTOMER_ID, PIZZA_ID, EXCLUSIONS,EXTRAS, ORDER_TIME)
VALUES
  ('1', '101', '1', '', '', '2020-01-01 18:05:02'),
  ('2', '101', '1', '', '', '2020-01-01 19:00:52'),
  ('3', '102', '1', '', '', '2020-01-02 23:51:23'),
  ('3', '102', '2', '', NULL, '2020-01-02 23:51:23'),
  ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
  ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
  ('4', '103', '2', '4', '', '2020-01-04 13:23:46'),
  ('5', '104', '1', 'null', '1', '2020-01-08 21:00:29'),
  ('6', '101', '2', 'null', 'null', '2020-01-08 21:03:13'),
  ('7', '105', '2', 'null', '1', '2020-01-08 21:20:29'),
  ('8', '102', '1', 'null', 'null', '2020-01-09 23:54:33'),
  ('9', '103', '1', '4', '1, 5', '2020-01-10 11:22:59'),
  ('10', '104', '1', 'null', 'null', '2020-01-11 18:34:49'),
  ('10', '104', '1', '2, 6', '1, 4', '2020-01-11 18:34:49');


DROP TABLE IF EXISTS runner_orders;
CREATE TABLE runner_orders (
  ORDER_ID INTEGER,
  RUNNER_ID INTEGER,
  PICKUP_TIME VARCHAR(19),
  DISTANCE VARCHAR(7),
  DURATION VARCHAR(10),
  CANCELLATION VARCHAR(23)
);

INSERT INTO runner_orders
  (ORDER_ID, RUNNER_ID, PICKUP_TIME, DISTANCE,DURATION, CANCELLATION)
VALUES
  ('1', '1', '2020-01-01 18:15:34', '20km', '32 minutes', ''),
  ('2', '1', '2020-01-01 19:10:54', '20km', '27 minutes', ''),
  ('3', '1', '2020-01-03 00:12:37', '13.4km', '20 mins', NULL),
  ('4', '2', '2020-01-04 13:53:03', '23.4', '40', NULL),
  ('5', '3', '2020-01-08 21:10:57', '10', '15', NULL),
  ('6', '3', 'null', 'null', 'null', 'Restaurant Cancellation'),
  ('7', '2', '2020-01-08 21:30:45', '25km', '25mins', 'null'),
  ('8', '2', '2020-01-10 00:15:02', '23.4 km', '15 minute', 'null'),
  ('9', '2', 'null', 'null', 'null', 'Customer Cancellation'),
  ('10', '1', '2020-01-11 18:50:20', '10km', '10minutes', 'null');


DROP TABLE IF EXISTS pizza_names;
CREATE TABLE pizza_names (
  PIZZA_ID INTEGER,
  PIZZA_NAME TEXT
);
INSERT INTO pizza_names
  (PIZZA_ID,PIZZA_NAME)
VALUES
  (1, 'Meatlovers'),
  (2, 'Vegetarian');


DROP TABLE IF EXISTS pizza_recipes;
CREATE TABLE pizza_recipes (
  PIZZA_ID INTEGER,
  PIZZA_NAME TEXT
);
INSERT INTO pizza_recipes
  (PIZZA_ID,PIZZA_NAME)
VALUES
  (1, '1, 2, 3, 4, 5, 6, 8, 10'),
  (2, '4, 6, 7, 9, 11, 12');


DROP TABLE IF EXISTS pizza_toppings;
CREATE TABLE pizza_toppings (
  TOPPING_ID INTEGER,
  TOPPING_NAME TEXT
);
INSERT INTO pizza_toppings
  (TOPPING_ID, TOPPING_NAME)
VALUES
  (1, 'Bacon'),
  (2, 'BBQ Sauce'),
  (3, 'Beef'),
  (4, 'Cheese'),
  (5, 'Chicken'),
  (6, 'Mushrooms'),
  (7, 'Onions'),
  (8, 'Pepperoni'),
  (9, 'Peppers'),
  (10, 'Salami'),
  (11, 'Tomatoes'),
  (12, 'Tomato Sauce');

  
  SELECT * FROM pizza_toppings;
  SELECT * FROM pizza_recipes;
  SELECT * FROM pizza_names;
  SELECT * FROM runner_orders;
  SELECT * FROM customer_orders;
  SELECT * FROM runners;


-- 

--How many pizzas were ordered?
SELECT
COUNT(DISTINCT ORDER_ID)
FROM customer_orders;

--How many unique customer orders were made

SELECT
COUNT(DISTINCT CUSTOMER_ID)
FROM CUSTOMER_ORDERS
;
-- How many successful orders were delivered by each runner?
SELECT * FROM RUNNER_ORDERS;
SELECT * FROM CUSTOMER_ORDERS;

UPDATE RUNNER_ORDERS
SET DURATION = REGEXP_REPLACE(DURATION,'[^0-9.]','');


UPDATE RUNNER_ORDERS
SET DURATION = REGEXP_REPLACE(DURATION,'[^0-9.]','');

UPDATE RUNNER_ORDERS
SET CANCELLATION = CASE WHEN CANCELLATION LIKE NULL OR CANCELLATION LIKE 'null' OR CANCELLATION LIKE 'Null' THEN '' ELSE CANCELLATION END;

SELECT
RUNNER_ID,
COUNT(*)
FROM RUNNER_ORDERS_FINAL
WHERE DISTANCE != 0
GROUP BY 1;

-- How many of each type of pizza was delivered?

SELECT * FROM pizza_toppings;
  SELECT * FROM pizza_recipes;
  SELECT * FROM pizza_names;
  SELECT * FROM runner_orderS_FINAL;
  SELECT * FROM customer_orders;
  SELECT * FROM runners;



SELECT
PIZZA_NAME,
COUNT(*)
FROM CUSTOMER_ORDERS CO
JOIN RUNNER_ORDERS_FINAL RO ON CO.ORDER_ID = RO.ORDER_ID
JOIN PIZZA_NAMES PN ON PN.PIZZA_ID = CO.PIZZA_ID
WHERE RO.DISTANCE != 0
GROUP BY 1;

SELECT * FROM RUNNER_ORDERS_FINAL;
-- How many Vegetarian and Meatlovers were ordered by each customer?

SELECT
CO.CUSTOMER_ID,
PN.PIZZA_NAME,
COUNT(*)
FROM CUSTOMER_ORDERS CO
JOIN PIZZA_NAMES PN ON CO.PIZZA_ID = PN.PIZZA_ID
GROUP BY 1,2
ORDER BY 1 ASC;



SELECT 
    CUSTOMER_ID,
    SUM(CASE WHEN PIZZA_NAME = 'Meatlovers' THEN 1 ELSE 0 END) AS Meatlovers_Count,
    SUM(CASE WHEN PIZZA_NAME = 'Vegetarian' THEN 1 ELSE 0 END) AS Vegetarian_Count
FROM CUSTOMER_ORDERS CO
JOIN PIZZA_NAMES PN ON CO.PIZZA_ID = PN.PIZZA_ID
GROUP BY CUSTOMER_ID
ORDER BY CUSTOMER_ID;

--What was the maximum number of pizzas delivered in a single order?

SELECT
CO.ORDER_ID,
COUNT(PIZZA_ID) AS TOTAL_PIZZA
FROM CUSTOMER_ORDERS CO
JOIN RUNNER_ORDERS_FINAL RO ON CO.ORDER_ID = RO.ORDER_ID
WHERE DISTANCE != 0
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;

-- For each customer, how many delivered pizzas had at least 1 change and how many had no changes?

UPDATE CUSTOMER_ORDERS  -- Replace with your actual table name
SET EXTRAS = NULL  -- or 'No Extras' or ''
WHERE EXTRAS IS NULL 
   OR EXTRAS = '' 
   OR TRIM(EXTRAS) = 'null';

SELECT * FROM CUSTOMER_ORDERS;


SELECT
CUSTOMER_ID,
LENGTH(EXCLUSIONS) - LENGTH(REPLACE(EXCLUSIONS,',','')) + 1 AS CHANGE_COUNT
FROM CUSTOMER_ORDERS
WHERE EXCLUSIONS IS NOT NULL
GROUP BY 1,2
HAVING CHANGE_COUNT >=1;

UPDATE CUSTOMER_ORDERS 
SET EXCLUSIONS = NULL
WHERE EXCLUSIONS IS NULL 
OR EXCLUSIONS = ''
OR TRIM(EXCLUSIONS) = ('null');


-- CLEANING THE DATA - CONVERTING THE PICKUP_TIME COLUMN  FROM VARCHAR TO TIMESTAMP
CREATE OR REPLACE TABLE RUNNER_ORDERS_COPY AS SELECT * FROM RUNNER_ORDERS;

SELECT * FROM RUNNER_ORDERS_COPY;

ALTER TABLE RUNNER_ORDERS_COPY ADD COLUMN PICKUP_TIME_TZ DATETIME;

UPDATE RUNNER_ORDERS_COPY
SET PICKUP_TIME =
CASE WHEN PICKUP_TIME IS NULL OR PICKUP_TIME LIKE 'null' or trim(PICKUP_TIME) = '' then NULL
ELSE TO_TIMESTAMP(PICKUP_TIME,'YYYY-MM-DD HH24:MI:SS')
END;

ALTER TABLE RUNNER_ORDERS_COPY DROP COLUMN PICKUP_TIME;

ALTER TABLE RUNNER_ORDERS_COPY RENAME COLUMN PICKUP_TIME_TZ TO PICKUP_TIME;

DESCRIBE TABLE RUNNER_ORDERS_COPY ;

-- CLEANING DISTANCE AND CONVERTING IT INTO FLOAT FROM VARCHAR
ALTER TABLE RUNNER_ORDERS_COPY ADD COLUMN DISTANCE_COPY FLOAT;


UPDATE RUNNER_ORDERS_COPY 
SET DISTANCE_COPY = 
CASE WHEN DISTANCE IS NULL OR DISTANCE LIKE ('null') OR TRIM(DISTANCE) = '' THEN NULL
ELSE TRY_CAST(REGEXP_REPLACE(DISTANCE,'[^0-9.]','')AS FLOAT) END;

ALTER TABLE RUNNER_ORDERS_COPY DROP COLUMN DISTANCE;

-- CLEANING DURATION AND CONVERTING IT INTO FLOAT FROM VARCHAR
ALTER TABLE RUNNER_ORDERS_COPY ADD COLUMN DURATION_COPY FLOAT;

UPDATE RUNNER_ORDERS_COPY
SET DURATION_COPY = 
CASE WHEN DURATION IS NULL OR DURATION LIKE 'null' OR TRIM(DURATION) = '' THEN NULL
ELSE TRY_CAST(REGEXP_REPLACE(DURATION,'[^0-9.]','')as FLOAT) END;

ALTER TABLE RUNNER_ORDERS_COPY DROP COLUMN DURATION;

CREATE OR REPLACE TABLE RUNNER_ORDERS_FINAL AS
SELECT
ORDER_ID,
RUNNER_ID,
CASE WHEN CANCELLATION IS NULL OR CANCELLATION LIKE 'null' or TRIM(CANCELLATION)  = '' THEN '' ELSE CANCELLATION END AS CANCELLATION,
CASE WHEN PICKUP_TIME IS NULL OR PICKUP_TIME LIKE 'null' or TRIM(PICKUP_TIME) = '' THEN NULL ELSE PICKUP_TIME END AS PICKUP_TIME,
CASE WHEN DISTANCE_COPY IS NULL OR DISTANCE_COPY LIKE 'null' or TRIM(DISTANCE_COPY) = '' THEN 0 ELSE DISTANCE_COPY END AS DISTANCE,
CASE WHEN DURATION_COPY     IS NULL OR DURATION_COPY LIKE 'null' or TRIM(DURATION_COPY) = '' THEN 0 ELSE DURATION_COPY END AS DURATION 
FROM RUNNER_ORDERS_COPY;

SELECT * FROM RUNNER_ORDERS_FINAL;
--How many pizzas were delivered that had both exclusions and extras?
SELECT
sum(
case when EXTRAS IS NOT NULL AND EXCLUSIONS IS NOT NULL THEN 1 ELSE 0 END
) AS PIZZA_COUNT
FROM CUSTOMER_ORDERS CO
JOIN RUNNER_ORDERS_FINAL RO ON CO.ORDER_ID = RO.ORDER_ID
WHERE DISTANCE !=0 AND EXCLUSIONS <> '' AND EXTRAS <> '';

--What was the total volume of pizzas ordered for each hour of the day?

SELECT
HOUR(ORDER_TIME) AS ORDER_HOUR,
COUNT(PIZZA_ID)
FROM CUSTOMER_ORDERS
GROUP BY 1;

-- How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)
SELECT 
  CEIL(DATEDIFF('day', '2021-01-01', "registration_date") / 7.0) +1 AS week_number,
  COUNT(*) AS runners_signed_up
FROM runners
GROUP BY week_number
ORDER BY week_number;
--What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?
SELECT * FROM RUNNER_ORDERS_FINAL;

SELECT
RO.RUNNER_ID,
ROUND(AVG(DATEDIFF(MINUTE,CO.ORDER_TIME,RO.PICKUP_TIME)),2) AS AVG_PICKUP_TIME
FROM RUNNER_ORDERS_FINAL RO
JOIN CUSTOMER_ORDERS CO ON RO.ORDER_ID = CO.ORDER_ID
WHERE RO.DISTANCE != 0
GROUP BY 1
ORDER BY 1;

--Is there any relationship between the number of pizzas and how long the order takes to prepare?
WITH CTE AS(
SELECT
ORDER_ID,
ORDER_TIME,
COUNT(PIZZA_ID) AS PIZZA_QTY
FROM CUSTOMER_ORDERS 
GROUP BY 1,2
)
SELECT
C.ORDER_ID,
C.PIZZA_QTY,
DATEDIFF(MINUTE,C.ORDER_TIME,RO.PICKUP_TIME) AS PREP_TIME
FROM CTE C
JOIN RUNNER_ORDERS_FINAL RO ON C.ORDER_ID = RO.ORDER_ID
WHERE RO.DISTANCE !=0
ORDER BY 1;

-- What was the average distance traveled for each customer?

SELECT
CO.CUSTOMER_ID,
AVG(RO.DISTANCE)AS AVG_DISTANCE_TRAVELLED
FROM CUSTOMER_ORDERS CO
JOIN RUNNER_ORDERS_FINAL RO ON CO.ORDER_ID=RO.ORDER_ID
WHERE RO.DISTANCE != 0
GROUP BY 1
ORDER BY 1
;

--What was the difference between the longest and shortest delivery times for all orders?

SELECT
MAX(DURATION) AS MAX_DURATION,
MIN(DURATION) AS MIN_DURATION,
MAX(DURATION)- MIN(DURATION) AS DIFF
FROM RUNNER_ORDERS_FINAL
WHERE DISTANCE!=0;

--What was the average speed for each runner for each delivery and do you notice any trend for these values?

SELECT  ro.order_id, 
  ro.runner_id, 
  ro.distance,
  ro.duration,
  count(co.pizza_id) as pizza_per_order,
  ROUND(distance*60/duration) as avg_speed,
  length()
FROM runner_orders_final as ro
join customer_orders as co on ro.order_id = co.order_id
where distance != 0
group by ro.order_id, ro.runner_id, ro.distance,ro.duration
order by ro.order_id asc;

-- INGREDIENTS
ALTER TABLE PIZZA_RECIPES RENAME COLUMN PIZZA_NAME TO TOPPING_ID;

DROP TABLE PIZZA_RECIPES;
SELECT * FROM PIZZA_RECIPE_FINAL;

CREATE OR REPLACE TABLE PIZZA_RECIPES_MASTER AS
SELECT
PN.PIZZA_ID,
PN.PIZZA_NAME,
PRF.TOPPING_ID,
PT.TOPPING_NAME
FROM PIZZA_NAMES PN 
JOIN PIZZA_RECIPE_FINAL PRF ON PN.PIZZA_ID = PRF.PIZZA_ID
JOIN PIZZA_TOPPINGS PT ON PRF.TOPPING_ID = PT.TOPPING_ID
ORDER BY 1,3;

SELECT
*
FROM PIZZA_RECIPES_MASTER;

SELECT
PIZZA_ID,
TRIM(VALUE:: INT) AS TOPPING_ID
FROM PIZZA_RECIPES,
LATERAL FLATTEN(INPUT => SPLIT(PIZZA_NAME,','));

-- What are the standard ingredients for each pizza?

SELECT
PIZZA_NAME,
TOPPING_NAME
FROM PIZZA_RECIPES_MASTER;

 --What was the most commonly added extra?
WITH CTE AS (
SELECT
PIZZA_ID,
TRIM(VALUE:: INT) AS TOPPING_EXTRAS
 FROM CUSTOMER_ORDERS ,
 LATERAL FLATTEN(INPUT => SPLIT(EXTRAS,','))
 )
 SELECT
PT.TOPPING_NAME,
COUNT(TOPPINGS)
 FROM CTE C
 JOIN PIZZA_TOPPINGS PT ON C.TOPPINGS = PT.TOPPING_ID
 GROUP BY 1
;

--What was the most common exclusion?
WITH CTE AS(
SELECT
PIZZA_ID,
TRIM(VALUE:: INT) AS TOPPING_EXCLUSIONS
FROM CUSTOMER_ORDERS,
LATERAL FLATTEN(INPUT => SPLIT(EXCLUSIONS,','))
)
SELECT
TOPPING_EXCLUSIONS,
COUNT(TOPPING_EXCLUSIONS)AS EXCLUSION_COUNT
FROM CTE C
JOIN PIZZA_TOPPINGS PT ON C.TOPPING_EXCLUSIONS = PT.TOPPING_ID
GROUP BY 1;

--If a Meat Lovers pizza costs $12 and Vegetarian costs $10 and there were no charges for changes — how much money has Pizza Runner made so far if there are no delivery fees?

SELECT
SUM(CASE WHEN PIZZA_NAME = 'Meatlovers' THEN 12 ELSE 10 END ) AS TOTAL_REVENUE
FROM CUSTOMER_ORDERS CO
JOIN PIZZA_NAMES PZ ON PZ.PIZZA_ID = CO.PIZZA_ID
JOIN RUNNER_ORDERS_FINAL RO ON RO.ORDER_ID = CO.ORDER_ID
WHERE RO.DISTANCE != 0
;
