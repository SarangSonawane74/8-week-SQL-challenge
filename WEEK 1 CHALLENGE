CREATE SCHEMA dannys_diner;

CREATE OR REPLACE TABLE sales (
  Customer_id VARCHAR(1),
  order_date DATE,
  product_id INTEGER
);

INSERT INTO sales
  (customer_id, order_date, product_id)
VALUES
  ('A', '2021-01-01', '1'),
  ('A', '2021-01-01', '2'),
  ('A', '2021-01-07', '2'),
  ('A', '2021-01-10', '3'),
  ('A', '2021-01-11', '3'),
  ('A', '2021-01-11', '3'),
  ('B', '2021-01-01', '2'),
  ('B', '2021-01-02', '2'),
  ('B', '2021-01-04', '1'),
  ('B', '2021-01-11', '1'),
  ('B', '2021-01-16', '3'),
  ('B', '2021-02-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-07', '3');
 

CREATE OR REPLACE TABLE menu (
  product_id INTEGER,
  product_name VARCHAR(5),
  price INTEGER
);
INSERT INTO menu
  (product_id, product_name, price)
VALUES
  ('1', 'sushi', '10'),
  ('2', 'curry', '15'),
  ('3', 'ramen', '12');
  

CREATE OR REPLACE TABLE members (
  customer_id VARCHAR(1),
  join_date DATE
);

INSERT INTO members
  (customer_id, join_date)
VALUES
  ('A', '2021-01-07'),
  ('B', '2021-01-09');

SELECT * FROM SALES;
SELECT * FROM MENU;
SELECT * FROM MEMBERS;

--What is the total amount each customer spent at the restaurant?
SELECT
S.CUSTOMER_ID,
SUM(M.PRICE)
FROM SALES S
JOIN MENU M ON S.PRODUCT_ID=M.PRODUCT_ID
GROUP BY 1;

--How many days has each customer visited the restaurant?
SELECT customer_id, COUNT(order_date) AS days_visited
FROM sales
GROUP BY customer_id;

--How many TIMES has each customer visited the restaurant?
SELECT customer_id, COUNT(DISTINCT order_date) AS days_visited
FROM sales
GROUP BY customer_id;

--First item from the menu purchased by each customer:
SELECT 
customer_id,
PRODUCT_ID,
MIN(order_date) AS first_purchase_date
FROM sales
GROUP BY 1,2;

--Most purchased item on the menu and how many times it was purchased by all customers:
SELECT
PRODUCT_ID,
COUNT(PRODUCT_ID)
FROM SALES
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1 ;


--Most popular item for each customer:
SELECT
CUSTOMER_ID,
PRODUCT_ID,
COUNT(PRODUCT_ID)
FROM SALES
GROUP BY 1,2
ORDER BY 3 DESC;

--Item purchased first by the customer after they became a member:
SELECT
SELECTS.CUSTOMER_ID,
S.PRODUCT_ID
FROM SALES S
JOIN MEMBERS M ON S.CUSTOMER_ID= M.CUSTOMER_ID
WHERE S.ORDER_DATE > M.JOIN_DATE;


--Item purchased just before the customer became a member:
SELECT
S.CUSTOMER_ID,
S.PRODUCT_ID
FROM SALES S
JOIN MEMBERS M ON S.CUSTOMER_ID = M.CUSTOMER_ID
WHERE S.ORDER_DATE < M.JOIN_DATE;

--Total items and amount spent for each member before they became a member:
SELECT
S.CUSTOMER_ID,
COUNT(S.PRODUCT_ID),
SUM(ME.PRICE)
FROM MEMBERS M 
JOIN SALES S ON M.CUSTOMER_ID = S.CUSTOMER_ID
JOIN MENU ME ON ME.PRODUCT_ID = S.PRODUCT_ID
WHERE S.ORDER_DATE < M.JOIN_DATE
GROUP BY 1;

--If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
SELECT DISTINCT
S.CUSTOMER_ID,
SUM(CASE
WHEN S.PRODUCT_ID = 2 THEN M.PRICE * 10
WHEN S.PRODUCT_ID = 3 THEN M.PRICE * 10
ELSE M.PRICE * 20
END )AS POINTS
FROM SALES S
JOIN MENU M ON S.PRODUCT_ID = M.PRODUCT_ID
GROUP BY 1;

--In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

SELECT
DISTINCT
(M.CUSTOMER_ID),
SUM(ME.PRICE * 20),
M.JOIN_DATE,
S.ORDER_DATE
FROM SALES S
JOIN MENU ME ON ME.PRODUCT_ID = S.PRODUCT_ID
JOIN MEMBERS M ON S.CUSTOMER_ID = M .CUSTOMER_ID
WHERE M.JOIN_DATE<S.ORDER_DATE AND S.ORDER_DATE <= '2021-01-31'
GROUP BY 1,3,4;


--
--CREATE OR REPLACE TABLE DANNY_MASTER AS
SELECT
S.CUSTOMER_ID,
S.ORDER_DATE,
ME.PRODUCT_ID,
ME.PRODUCT_NAME,
ME.PRICE,
CASE
    WHEN m.customer_id IS NOT NULL THEN 'Y'
    ELSE 'N'
  END AS MEMBER,
CASE 
WHEN M.CUSTOMER_ID IS NOT NULL THEN
ROW_NUMBER()OVER (PARTITION BY M.CUSTOMER_ID ORDER BY ME.PRICE) 
ELSE NULL
END AS RANKING 
FROM SALES S
LEFT JOIN MENU ME ON ME.PRODUCT_ID = S.PRODUCT_ID
LEFT JOIN MEMBERS M ON M.CUSTOMER_ID = S.CUSTOMER_ID
;
